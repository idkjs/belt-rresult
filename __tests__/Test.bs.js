// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Format = require("bs-platform/lib/js/format.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Rresult$BeltRresult = require("../src/rresult.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function log(f) {
  return Format.printf(Pervasives.$caret$caret(f, /* Format */[
                  /* Formatting_lit */Block.__(17, [
                      /* Flush_newline */4,
                      /* End_of_format */0
                    ]),
                  "@."
                ]));
}

function raises_invalid_arg(f, x) {
  try {
    Curry._1(f, x);
    throw Pervasives.Exit;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
      return ;
    }
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            16,
            9
          ]
        ];
  }
}

function test_constructors(param) {
  log(/* Format */[
        /* String_literal */Block.__(11, [
            "Test R.{ok,error}",
            /* End_of_format */0
          ]),
        "Test R.{ok,error}"
      ]);
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.ok(3), /* Ok */Block.__(0, [3]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            21,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.error(/* An_error */-753331242), /* Error */Block.__(1, [/* An_error */-753331242]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            22,
            2
          ]
        ];
  }
  
}

function test_reword_error(param) {
  log(/* Format */[
        /* String_literal */Block.__(11, [
            "Test R.reword_error",
            /* End_of_format */0
          ]),
        "Test R.reword_error"
      ]);
  var reword = function (param) {
    return /* Another_one */-476927094;
  };
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.reword_error(reword, /* Ok */Block.__(0, [3])), /* Ok */Block.__(0, [3]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            29,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.reword_error(reword, /* Error */Block.__(1, [/* An_error */-753331242])), /* Error */Block.__(1, [/* Another_one */-476927094]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            30,
            2
          ]
        ];
  }
  
}

function test_gets(param) {
  log(/* Format */[
        /* String_literal */Block.__(11, [
            "Test R.get_{ok,error}",
            /* End_of_format */0
          ]),
        "Test R.get_{ok,error}"
      ]);
  if (Rresult$BeltRresult.R.get_ok(/* Ok */Block.__(0, [2])) !== 2) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            36,
            2
          ]
        ];
  }
  if (Rresult$BeltRresult.R.get_error(/* Error */Block.__(1, [3])) !== 3) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            37,
            2
          ]
        ];
  }
  raises_invalid_arg(Rresult$BeltRresult.R.get_ok, /* Error */Block.__(1, [3]));
  raises_invalid_arg(Rresult$BeltRresult.R.get_error, /* Ok */Block.__(0, [2]));
  
}

function test_bind(param) {
  log(/* Format */[
        /* String_literal */Block.__(11, [
            "Test R.bind",
            /* End_of_format */0
          ]),
        "Test R.bind"
      ]);
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.bind(/* Ok */Block.__(0, [3]), (function (v) {
                return /* Error */Block.__(1, [String(v)]);
              })), /* Error */Block.__(1, ["3"]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            45,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.bind(/* Ok */Block.__(0, [3]), (function (v) {
                return /* Ok */Block.__(0, [String(v)]);
              })), /* Ok */Block.__(0, ["3"]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            46,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.bind(/* Error */Block.__(1, [1]), (function (v) {
                return /* Ok */Block.__(0, [String(v)]);
              })), /* Error */Block.__(1, [1]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            47,
            2
          ]
        ];
  }
  
}

function test_map(param) {
  log(/* Format */[
        /* String_literal */Block.__(11, [
            "Test R.map",
            /* End_of_format */0
          ]),
        "Test R.map"
      ]);
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.map((function (v) {
                return String(v);
              }), /* Ok */Block.__(0, [2])), /* Ok */Block.__(0, ["2"]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            53,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.map((function (v) {
                return String(v);
              }), /* Error */Block.__(1, [2])), /* Error */Block.__(1, [2]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            54,
            2
          ]
        ];
  }
  
}

function test_join(param) {
  log(/* Format */[
        /* String_literal */Block.__(11, [
            "Test R.join",
            /* End_of_format */0
          ]),
        "Test R.join"
      ]);
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.join(/* Ok */Block.__(0, [/* Ok */Block.__(0, [3])])), /* Ok */Block.__(0, [3]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            60,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.join(/* Ok */Block.__(0, [/* Error */Block.__(1, [2])])), /* Error */Block.__(1, [2]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            61,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.join(/* Error */Block.__(1, [3])), /* Error */Block.__(1, [3]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            62,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.join(/* Error */Block.__(1, [4])), /* Error */Block.__(1, [4]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            63,
            2
          ]
        ];
  }
  
}

function test_msgs(param) {
  log(/* Format */[
        /* String_literal */Block.__(11, [
            "Test error messages.",
            /* End_of_format */0
          ]),
        "Test error messages."
      ]);
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.msg("bla"), /* `Msg */[
          3854881,
          "bla"
        ])) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            69,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Curry._1(Rresult$BeltRresult.R.msgf(/* Format */[
                  /* String_literal */Block.__(11, [
                      "bla",
                      /* Int */Block.__(4, [
                          /* Int_d */0,
                          /* No_padding */0,
                          /* No_precision */0,
                          /* End_of_format */0
                        ])
                    ]),
                  "bla%d"
                ]), 3), /* `Msg */[
          3854881,
          "bla3"
        ])) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            70,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.error_msg("bla"), /* Error */Block.__(1, [/* `Msg */[
              3854881,
              "bla"
            ]]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            71,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Curry._1(Rresult$BeltRresult.R.error_msgf(/* Format */[
                  /* String_literal */Block.__(11, [
                      "bla",
                      /* Int */Block.__(4, [
                          /* Int_d */0,
                          /* No_padding */0,
                          /* No_precision */0,
                          /* End_of_format */0
                        ])
                    ]),
                  "bla%d"
                ]), 3), /* Error */Block.__(1, [/* `Msg */[
              3854881,
              "bla3"
            ]]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            72,
            2
          ]
        ];
  }
  var reword = function (s) {
    return /* `Msg */[
            3854881,
            s + "++"
          ];
  };
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.reword_error_msg(true, reword, /* Ok */Block.__(0, [2])), /* Ok */Block.__(0, [2]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            74,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.reword_error_msg(false, reword, /* Ok */Block.__(0, [2])), /* Ok */Block.__(0, [2]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            75,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.reword_error_msg(true, reword, /* Error */Block.__(1, [/* `Msg */[
                  3854881,
                  "ha"
                ]])), /* Error */Block.__(1, [/* `Msg */[
              3854881,
              "ha++"
            ]]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            76,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.reword_error_msg(false, reword, /* Error */Block.__(1, [/* `Msg */[
                  3854881,
                  "ha"
                ]])), /* Error */Block.__(1, [/* `Msg */[
              3854881,
              "ha\nha++"
            ]]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            80,
            2
          ]
        ];
  }
  var pp_error = function (ppf, param) {
    return Format.fprintf(ppf, /* Format */[
                /* Char_literal */Block.__(12, [
                    /* "E" */69,
                    /* End_of_format */0
                  ]),
                "E"
              ]);
  };
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.error_to_msg(pp_error, /* Ok */Block.__(0, [2])), /* Ok */Block.__(0, [2]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            87,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.error_to_msg(pp_error, /* Error */Block.__(1, [/* E */69])), /* Error */Block.__(1, [/* `Msg */[
              3854881,
              "E"
            ]]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            88,
            2
          ]
        ];
  }
  if (Rresult$BeltRresult.R.error_msg_to_invalid_arg(/* Ok */Block.__(0, [2])) !== 2) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            89,
            2
          ]
        ];
  }
  raises_invalid_arg(Rresult$BeltRresult.R.error_msg_to_invalid_arg, /* Error */Block.__(1, [/* `Msg */[
            3854881,
            "E"
          ]]));
  
}

function test_exn_trap(param) {
  log(/* Format */[
        /* String_literal */Block.__(11, [
            "Test trapping unexpected exceptions.",
            /* End_of_format */0
          ]),
        "Test trapping unexpected exceptions."
      ]);
  var no_raise = function (x) {
    return String(x);
  };
  var do_raise = function (param) {
    throw Pervasives.Exit;
  };
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.trap_exn(no_raise, 3), /* Ok */Block.__(0, ["3"]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            99,
            2
          ]
        ];
  }
  var match = Rresult$BeltRresult.R.trap_exn(do_raise, 3);
  if (match.tag) {
    var match$1 = match[0];
    var exit = 0;
    if (typeof match$1 === "number" || match$1[0] !== -469840015 || match$1[1][0] !== Pervasives.Exit) {
      exit = 1;
    }
    if (exit === 1) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "Test.re",
              103,
              16
            ]
          ];
    }
    
  } else {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            101,
            13
          ]
        ];
  }
  
}

function test_is(param) {
  log(/* Format */[
        /* String_literal */Block.__(11, [
            "Test R.is_{ok,error}",
            /* End_of_format */0
          ]),
        "Test R.is_{ok,error}"
      ]);
  if (!Rresult$BeltRresult.R.is_ok(/* Ok */Block.__(0, [2]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            110,
            2
          ]
        ];
  }
  if (Rresult$BeltRresult.R.is_ok(/* Error */Block.__(1, [2]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            111,
            2
          ]
        ];
  }
  if (!Rresult$BeltRresult.R.is_error(/* Error */Block.__(1, [2]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            112,
            2
          ]
        ];
  }
  if (Rresult$BeltRresult.R.is_error(/* Ok */Block.__(0, [2]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            113,
            2
          ]
        ];
  }
  
}

function test_converting(param) {
  log(/* Format */[
        /* String_literal */Block.__(11, [
            "Test R.{to,of}_{option,presult}",
            /* End_of_format */0
          ]),
        "Test R.{to,of}_{option,presult}"
      ]);
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.to_option(/* Ok */Block.__(0, [3])), 3)) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            119,
            2
          ]
        ];
  }
  if (Rresult$BeltRresult.R.to_option(/* Error */Block.__(1, [3])) !== undefined) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            120,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.of_option((function (param) {
                return /* Error */Block.__(1, ["none"]);
              }), 3), /* Ok */Block.__(0, [3]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            121,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.of_option((function (param) {
                return /* Error */Block.__(1, ["none"]);
              }), undefined), /* Error */Block.__(1, ["none"]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            122,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.to_presult(/* Ok */Block.__(0, [3])), /* `Ok */[
          17724,
          3
        ])) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            123,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.to_presult(/* Error */Block.__(1, [3])), /* `Error */[
          106380200,
          3
        ])) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            124,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.of_presult(/* `Ok */[
              17724,
              3
            ]), /* Ok */Block.__(0, [3]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            125,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.of_presult(/* `Error */[
              106380200,
              3
            ]), /* Error */Block.__(1, [3]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            126,
            2
          ]
        ];
  }
  
}

function test_ignoring(param) {
  log(/* Format */[
        /* String_literal */Block.__(11, [
            "Test.[k]ignore_error",
            /* End_of_format */0
          ]),
        "Test.[k]ignore_error"
      ]);
  if (Rresult$BeltRresult.R.ignore_error((function (param) {
            return 3;
          }), /* Ok */Block.__(0, [4])) !== 4) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            132,
            2
          ]
        ];
  }
  if (Rresult$BeltRresult.R.ignore_error((function (param) {
            return 3;
          }), /* Error */Block.__(1, [4])) !== 3) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            133,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.kignore_error((function (param) {
                return /* Ok */Block.__(0, [3]);
              }), /* Ok */Block.__(0, [4])), /* Ok */Block.__(0, [4]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            134,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.kignore_error((function (param) {
                return /* Ok */Block.__(0, [3]);
              }), /* Error */Block.__(1, [4])), /* Ok */Block.__(0, [3]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            135,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.kignore_error((function (param) {
                return /* Error */Block.__(1, [3]);
              }), /* Ok */Block.__(0, [4])), /* Ok */Block.__(0, [4]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            136,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Rresult$BeltRresult.R.kignore_error((function (param) {
                return /* Error */Block.__(1, [3]);
              }), /* Error */Block.__(1, [4])), /* Error */Block.__(1, [3]))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            137,
            2
          ]
        ];
  }
  
}

function tests(param) {
  test_constructors(undefined);
  test_reword_error(undefined);
  test_gets(undefined);
  test_bind(undefined);
  test_map(undefined);
  test_join(undefined);
  test_msgs(undefined);
  test_exn_trap(undefined);
  test_is(undefined);
  test_converting(undefined);
  test_ignoring(undefined);
  
}

tests(undefined);

log(/* Format */[
      /* String_literal */Block.__(11, [
          "All tests succeeded.",
          /* End_of_format */0
        ]),
      "All tests succeeded."
    ]);

exports.log = log;
exports.raises_invalid_arg = raises_invalid_arg;
exports.test_constructors = test_constructors;
exports.test_reword_error = test_reword_error;
exports.test_gets = test_gets;
exports.test_bind = test_bind;
exports.test_map = test_map;
exports.test_join = test_join;
exports.test_msgs = test_msgs;
exports.test_exn_trap = test_exn_trap;
exports.test_is = test_is;
exports.test_converting = test_converting;
exports.test_ignoring = test_ignoring;
exports.tests = tests;
/*  Not a pure module */
